// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allows to disable css snapshotting: mount 1`] = `
<div>
  <styleSheetSerializerspec__A>
    <div
      className="c0"
    >
      Styled, exciting div
    </div>
  </styleSheetSerializerspec__A>
  <styleSheetSerializerspec__B>
    <div
      className="c1"
    >
      Styled, exciting div
    </div>
  </styleSheetSerializerspec__B>
</div>
`;

exports[`allows to disable css snapshotting: react-test-renderer 1`] = `
<div>
  <div
    className="c0"
  >
    Styled, exciting div
  </div>
  <div
    className="c1"
  >
    Styled, exciting div
  </div>
</div>
`;

exports[`allows to disable css snapshotting: react-testing-library 1`] = `
<div>
  <div
    class="c0"
  >
    Styled, exciting div
  </div>
  <div
    class="c1"
  >
    Styled, exciting div
  </div>
</div>
`;

exports[`allows to disable css snapshotting: shallow 1`] = `
<div>
  <styleSheetSerializerspec__A>
    Styled, exciting div
  </styleSheetSerializerspec__A>
  <styleSheetSerializerspec__B>
    Styled, exciting div
  </styleSheetSerializerspec__B>
</div>
`;

exports[`allows to set a css classNameFormatter: mount 1`] = `
.styledComponent0 {
  color: red;
}

.styledComponent1 {
  color: green;
}

<div>
  <styleSheetSerializerspec__A>
    <div
      className="styledComponent0"
    >
      Styled, exciting div
    </div>
  </styleSheetSerializerspec__A>
  <styleSheetSerializerspec__B>
    <div
      className="styledComponent1"
    >
      Styled, exciting div
    </div>
  </styleSheetSerializerspec__B>
</div>
`;

exports[`allows to set a css classNameFormatter: react-test-renderer 1`] = `
.styledComponent0 {
  color: red;
}

.styledComponent1 {
  color: green;
}

<div>
  <div
    className="styledComponent0"
  >
    Styled, exciting div
  </div>
  <div
    className="styledComponent1"
  >
    Styled, exciting div
  </div>
</div>
`;

exports[`allows to set a css classNameFormatter: react-testing-library 1`] = `
.styledComponent0 {
  color: red;
}

.styledComponent1 {
  color: green;
}

<div>
  <div
    class="styledComponent0"
  >
    Styled, exciting div
  </div>
  <div
    class="styledComponent1"
  >
    Styled, exciting div
  </div>
</div>
`;

exports[`allows to set a css classNameFormatter: shallow 1`] = `
<div>
  <styleSheetSerializerspec__A>
    Styled, exciting div
  </styleSheetSerializerspec__A>
  <styleSheetSerializerspec__B>
    Styled, exciting div
  </styleSheetSerializerspec__B>
</div>
`;

exports[`any component: mount 1`] = `
.c0 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <Link>
    <a>
      Unstyled, boring Link
    </a>
  </Link>
  <br />
  <styleSheetSerializerspec__StyledLink>
    <Link
      className="c0"
    >
      <a
        className="c0"
      >
        Styled, exciting Link
      </a>
    </Link>
  </styleSheetSerializerspec__StyledLink>
</div>
`;

exports[`any component: react-test-renderer 1`] = `
.c0 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <a>
    Unstyled, boring Link
  </a>
  <br />
  <a
    className="c0"
  >
    Styled, exciting Link
  </a>
</div>
`;

exports[`any component: react-testing-library 1`] = `
.c0 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <a>
    Unstyled, boring Link
  </a>
  <br />
  <a
    class="c0"
  >
    Styled, exciting Link
  </a>
</div>
`;

exports[`any component: shallow 1`] = `
<div>
  <Link>
    Unstyled, boring Link
  </Link>
  <br />
  <styleSheetSerializerspec__StyledLink>
    Styled, exciting Link
  </styleSheetSerializerspec__StyledLink>
</div>
`;

exports[`attaching additional props: mount 1`] = `
.c0 {
  color: red;
}

<styleSheetSerializerspec__Div>
  <div
    className="c0 div"
  />
</styleSheetSerializerspec__Div>
`;

exports[`attaching additional props: react-test-renderer 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 div"
/>
`;

exports[`attaching additional props: react-testing-library 1`] = `
.c0 {
  color: red;
}

<div
  class="c0 div"
/>
`;

exports[`attaching additional props: shallow 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 div"
/>
`;

exports[`basic: mount 1`] = `
.c0 {
  padding: 4em;
  background: papayawhip;
}

.c1 {
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
}

<styleSheetSerializerspec__Wrapper>
  <section
    className="c0"
  >
    <styleSheetSerializerspec__Title>
      <h1
        className="c1"
      >
        Hello World, this is my first styled component!
      </h1>
    </styleSheetSerializerspec__Title>
  </section>
</styleSheetSerializerspec__Wrapper>
`;

exports[`basic: react-test-renderer 1`] = `
.c0 {
  padding: 4em;
  background: papayawhip;
}

.c1 {
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
}

<section
  className="c0"
>
  <h1
    className="c1"
  >
    Hello World, this is my first styled component!
  </h1>
</section>
`;

exports[`basic: react-testing-library 1`] = `
.c0 {
  padding: 4em;
  background: papayawhip;
}

.c1 {
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
}

<section
  class="c0"
>
  <h1
    class="c1"
  >
    Hello World, this is my first styled component!
  </h1>
</section>
`;

exports[`basic: shallow 1`] = `
.c0 {
  padding: 4em;
  background: papayawhip;
}

<section
  className="c0"
>
  <styleSheetSerializerspec__Title>
    Hello World, this is my first styled component!
  </styleSheetSerializerspec__Title>
</section>
`;

exports[`duplicated components: mount 1`] = `
.c0 {
  color: red;
}

.c1 {
  color: green;
}

<div>
  <styleSheetSerializerspec__A>
    <div
      className="c0"
    />
  </styleSheetSerializerspec__A>
   
  <styleSheetSerializerspec__A>
    <div
      className="c0"
    />
  </styleSheetSerializerspec__A>
   
  <styleSheetSerializerspec__B>
    <div
      className="c1"
    />
  </styleSheetSerializerspec__B>
</div>
`;

exports[`duplicated components: react-test-renderer 1`] = `
.c0 {
  color: red;
}

.c1 {
  color: green;
}

<div>
  <div
    className="c0"
  />
   
  <div
    className="c0"
  />
   
  <div
    className="c1"
  />
</div>
`;

exports[`duplicated components: react-testing-library 1`] = `
.c0 {
  color: red;
}

.c1 {
  color: green;
}

<div>
  <div
    class="c0"
  />
   
  <div
    class="c0"
  />
   
  <div
    class="c1"
  />
</div>
`;

exports[`duplicated components: shallow 1`] = `
<div>
  <styleSheetSerializerspec__A />
   
  <styleSheetSerializerspec__A />
   
  <styleSheetSerializerspec__B />
</div>
`;

exports[`empty style: mount 1`] = `
<styleSheetSerializerspec__Component>
  <div
    className=""
  />
</styleSheetSerializerspec__Component>
`;

exports[`empty style: react-test-renderer 1`] = `
<div
  className=""
/>
`;

exports[`empty style: react-testing-library 1`] = `
<div
  class=""
/>
`;

exports[`empty style: shallow 1`] = `
<div
  className=""
/>
`;

exports[`included class name: mount 1`] = `
.c0 {
  color: red;
}

<styleSheetSerializerspec__Div>
  <div
    className="c0 i"
  />
</styleSheetSerializerspec__Div>
`;

exports[`included class name: react-test-renderer 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 i"
/>
`;

exports[`included class name: react-testing-library 1`] = `
.c0 {
  color: red;
}

<div
  class="c0 i"
/>
`;

exports[`included class name: shallow 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 i"
/>
`;

exports[`leading white spaces: mount 1`] = `
<Div>
  <div
    className="  div"
  />
</Div>
`;

exports[`leading white spaces: react-test-renderer 1`] = `
<div
  className="  div"
/>
`;

exports[`leading white spaces: react-testing-library 1`] = `
<div
  class="  div"
/>
`;

exports[`leading white spaces: shallow 1`] = `
<div
  className="  div"
/>
`;

exports[`non-styled: mount 1`] = `<div />`;

exports[`non-styled: react-test-renderer 1`] = `<div />`;

exports[`non-styled: react-testing-library 1`] = `<div />`;

exports[`non-styled: shallow 1`] = `<div />`;

exports[`null 1`] = `null`;

exports[`referring to other components: mount 1`] = `
.c3 {
  display: flex;
  align-items: center;
  padding: 5px 10px;
  background: papayawhip;
  color: palevioletred;
}

.c4 {
  transition: fill 0.25s;
  width: 48px;
  height: 48px;
}

.c2:hover .c4 {
  fill: rebeccapurple;
}

.c5 {
  display: flex;
  align-items: center;
  line-height: 1.2;
}

.c5::before {
  content: '◀';
  margin: 0 10px;
}

.c1 {
  color: black;
}

.c0 .c6 {
  color: yellow;
  background-color: green;
}

.c0 .c7 {
  color: yellow;
  background-color: red;
}

<styleSheetSerializerspec__Container>
  <div
    className="c0 c1"
  >
    <styleSheetSerializerspec__Link
      href="#"
    >
      <a
        className="c2 c3"
        href="#"
      >
        <styleSheetSerializerspec__Icon>
          <svg
            className="c4"
          />
        </styleSheetSerializerspec__Icon>
        <styleSheetSerializerspec__Label>
          <span
            className="c5"
          >
            Hovering my parent changes my style!
          </span>
        </styleSheetSerializerspec__Label>
        <styleSheetSerializerspec__TextWithConditionalFormatting>
          <span
            className="c6"
          >
            I should be green
          </span>
        </styleSheetSerializerspec__TextWithConditionalFormatting>
        <styleSheetSerializerspec__TextWithConditionalFormatting
          error={true}
        >
          <span
            className="c7"
            error={true}
          >
            I should be red
          </span>
        </styleSheetSerializerspec__TextWithConditionalFormatting>
      </a>
    </styleSheetSerializerspec__Link>
  </div>
</styleSheetSerializerspec__Container>
`;

exports[`referring to other components: react-test-renderer 1`] = `
.c3 {
  display: flex;
  align-items: center;
  padding: 5px 10px;
  background: papayawhip;
  color: palevioletred;
}

.c4 {
  transition: fill 0.25s;
  width: 48px;
  height: 48px;
}

.c2:hover .c4 {
  fill: rebeccapurple;
}

.c5 {
  display: flex;
  align-items: center;
  line-height: 1.2;
}

.c5::before {
  content: '◀';
  margin: 0 10px;
}

.c1 {
  color: black;
}

.c0 .c6 {
  color: yellow;
  background-color: green;
}

.c0 .c7 {
  color: yellow;
  background-color: red;
}

<div
  className="c0 c1"
>
  <a
    className="c2 c3"
    href="#"
  >
    <svg
      className="c4"
    />
    <span
      className="c5"
    >
      Hovering my parent changes my style!
    </span>
    <span
      className="c6"
    >
      I should be green
    </span>
    <span
      className="c7"
      error={true}
    >
      I should be red
    </span>
  </a>
</div>
`;

exports[`referring to other components: react-testing-library 1`] = `
.c3 {
  display: flex;
  align-items: center;
  padding: 5px 10px;
  background: papayawhip;
  color: palevioletred;
}

.c4 {
  transition: fill 0.25s;
  width: 48px;
  height: 48px;
}

.c2:hover .c4 {
  fill: rebeccapurple;
}

.c5 {
  display: flex;
  align-items: center;
  line-height: 1.2;
}

.c5::before {
  content: '◀';
  margin: 0 10px;
}

.c1 {
  color: black;
}

.c0 .c6 {
  color: yellow;
  background-color: green;
}

.c0 .c7 {
  color: yellow;
  background-color: red;
}

<div
  class="c0 c1"
>
  <a
    class="c2 c3"
    href="#"
  >
    <svg
      class="c4"
    />
    <span
      class="c5"
    >
      Hovering my parent changes my style!
    </span>
    <span
      class="c6"
    >
      I should be green
    </span>
    <span
      class="c7"
    >
      I should be red
    </span>
  </a>
</div>
`;

exports[`referring to other unreferenced components: mount 1`] = `
.c0 {
  font-size: 1.5em;
}

.c1 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <styleSheetSerializerspec__ReferencedLink>
    <a
      className="c0 c1"
    >
      Styled, exciting Link
    </a>
  </styleSheetSerializerspec__ReferencedLink>
</div>
`;

exports[`referring to other unreferenced components: react-test-renderer 1`] = `
.c0 {
  font-size: 1.5em;
}

.c1 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <a
    className="c0 c1"
  >
    Styled, exciting Link
  </a>
</div>
`;

exports[`referring to other unreferenced components: react-testing-library 1`] = `
.c0 {
  font-size: 1.5em;
}

.c1 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <a
    class="c0 c1"
  >
    Styled, exciting Link
  </a>
</div>
`;

exports[`referring to other unreferenced components: shallow 1`] = `
<div>
  <styleSheetSerializerspec__ReferencedLink>
    Styled, exciting Link
  </styleSheetSerializerspec__ReferencedLink>
</div>
`;

exports[`shallow with theme 1`] = `
.c0 {
  color: mediumseagreen;
}

<button
  className="c0"
>
  Themed
</button>
`;

exports[`should match the same snapshot rerendering the same element: first-render 1`] = `
.c0 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`should match the same snapshot rerendering the same element: second-render 1`] = `
.c0 {
  color: palevioletred;
  font-weight: bold;
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`strips unused styles: mount 1`] = `
.c2 {
  color: blue;
}

.c0 {
  font-size: 16px;
}

.c0 .c1 {
  text-align: right;
}

<styleSheetSerializerspec__FancyText>
  <div
    className="c0"
  >
    <styleSheetSerializerspec__BlueText>
      <div
        className="c1 c2"
      >
        A container that has styles for an unused child
      </div>
    </styleSheetSerializerspec__BlueText>
  </div>
</styleSheetSerializerspec__FancyText>
`;

exports[`strips unused styles: react-test-renderer 1`] = `
.c2 {
  color: blue;
}

.c0 {
  font-size: 16px;
}

.c0 .c1 {
  text-align: right;
}

<div
  className="c0"
>
  <div
    className="c1 c2"
  >
    A container that has styles for an unused child
  </div>
</div>
`;

exports[`strips unused styles: react-testing-library 1`] = `
.c2 {
  color: blue;
}

.c0 {
  font-size: 16px;
}

.c0 .c1 {
  text-align: right;
}

<div
  class="c0"
>
  <div
    class="c1 c2"
  >
    A container that has styles for an unused child
  </div>
</div>
`;

exports[`supported css: mount 1`] = `
.c0 {
  padding: 2em 1em;
  background: papayawhip;
}

.c0:hover {
  background: palevioletred;
}

.c0 >p {
  text-decoration: underline;
}

html.test .c0 {
  display: none;
}

@media (max-width:600px) {
  .c0 {
    background: tomato;
  }

  .c0:hover {
    background: yellow;
  }
}

<styleSheetSerializerspec__Example>
  <div
    className="c0"
  >
    <p>
      Hello World!
    </p>
  </div>
</styleSheetSerializerspec__Example>
`;

exports[`supported css: react-test-renderer 1`] = `
.c0 {
  padding: 2em 1em;
  background: papayawhip;
}

.c0:hover {
  background: palevioletred;
}

.c0 >p {
  text-decoration: underline;
}

html.test .c0 {
  display: none;
}

@media (max-width:600px) {
  .c0 {
    background: tomato;
  }

  .c0:hover {
    background: yellow;
  }
}

<div
  className="c0"
>
  <p>
    Hello World!
  </p>
</div>
`;

exports[`supported css: react-testing-library 1`] = `
.c0 {
  padding: 2em 1em;
  background: papayawhip;
}

.c0:hover {
  background: palevioletred;
}

.c0 >p {
  text-decoration: underline;
}

html.test .c0 {
  display: none;
}

@media (max-width:600px) {
  .c0 {
    background: tomato;
  }

  .c0:hover {
    background: yellow;
  }
}

<div
  class="c0"
>
  <p>
    Hello World!
  </p>
</div>
`;

exports[`supported css: shallow 1`] = `
.c0 {
  padding: 2em 1em;
  background: papayawhip;
}

.c0:hover {
  background: palevioletred;
}

.c0 >p {
  text-decoration: underline;
}

html.test .c0 {
  display: none;
}

@media (max-width:600px) {
  .c0 {
    background: tomato;
  }

  .c0:hover {
    background: yellow;
  }
}

<div
  className="c0"
>
  <p>
    Hello World!
  </p>
</div>
`;

exports[`theming: mount 1`] = `
.c0 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c1 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: mediumseagreen;
  border: 2px solid mediumseagreen;
}

<div>
  <styleSheetSerializerspec__Button
    theme={
      Object {
        "main": "palevioletred",
      }
    }
  >
    <button
      className="c0"
    >
      Normal
    </button>
  </styleSheetSerializerspec__Button>
  <Component
    theme={
      Object {
        "main": "mediumseagreen",
      }
    }
  >
    <styleSheetSerializerspec__Button
      theme={
        Object {
          "main": "palevioletred",
        }
      }
    >
      <button
        className="c1"
      >
        Themed
      </button>
    </styleSheetSerializerspec__Button>
  </Component>
</div>
`;

exports[`theming: react-test-renderer 1`] = `
.c0 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c1 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: mediumseagreen;
  border: 2px solid mediumseagreen;
}

<div>
  <button
    className="c0"
  >
    Normal
  </button>
  <button
    className="c1"
  >
    Themed
  </button>
</div>
`;

exports[`theming: react-testing-library 1`] = `
.c0 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c1 {
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  color: mediumseagreen;
  border: 2px solid mediumseagreen;
}

<div>
  <button
    class="c0"
  >
    Normal
  </button>
  <button
    class="c1"
  >
    Themed
  </button>
</div>
`;

exports[`theming: shallow 1`] = `
<div>
  <styleSheetSerializerspec__Button
    theme={
      Object {
        "main": "palevioletred",
      }
    }
  >
    Normal
  </styleSheetSerializerspec__Button>
  <Component
    theme={
      Object {
        "main": "mediumseagreen",
      }
    }
  >
    <styleSheetSerializerspec__Button
      theme={
        Object {
          "main": "palevioletred",
        }
      }
    >
      Themed
    </styleSheetSerializerspec__Button>
  </Component>
</div>
`;

exports[`trailing white spaces: mount 1`] = `
.c0 {
  color: red;
}

<styleSheetSerializerspec__Div>
  <div
    className="c0 div  "
  />
</styleSheetSerializerspec__Div>
`;

exports[`trailing white spaces: react-test-renderer 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 div  "
/>
`;

exports[`trailing white spaces: react-testing-library 1`] = `
.c0 {
  color: red;
}

<div
  class="c0 div  "
/>
`;

exports[`trailing white spaces: shallow 1`] = `
.c0 {
  color: red;
}

<div
  className="c0 div  "
/>
`;
